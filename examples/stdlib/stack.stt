(fn) [a] drop {}
(fn) [a b] flip {b a}
(fn) [a] dup {a a}
(fn) [a b c] rot3 { c a b }

(fn) * stack$has {
	stack$len 0 = not
}

(fn) * rotn {
	arr$new
	(while) { debug$stack flip dup 0  = not } {
		rot3
		arr$append
		flip
		1 -
		flip
	}
	drop
	flip
	debug$stack
	"_" set
	arr$reverse
	arr$unpack drop
	"_" get
}

# plan for rotn
# with n         [..., n]
# 1 (-)          [..., n-1]
# arr$new        [..., n, []]
#<  flip         [..., [], n]
#<  dup          [..., [], n, n]
#<  0 = not      [..., [], n] {n!=0}
# while (flip dup 0 = not)
#>  rot3         [..., n, ?, []] <---+
#>  arr$append   [..., n, [?]]       |
#>  flip         [..., [?], n]       |
#>  1 (-)        [..., [?], n-1]     |
#  \---------------------------------/
# drop           [..., [?], 0]
# flip           [..., [?], ?*]
# "_" set        [..., [?]]
# arr$unpack     [..., [n], n]
# drop           [..., [n]]
# "_" get        [..., ?*]

