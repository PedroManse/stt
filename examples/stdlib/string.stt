
# would be better with early return
(fn) [str] atoi {
	str str$into-arr
	arr$unpack
	0 0 pull3
	# [ ...char, acc, step, char-count]
	(while) {
		# [...chars, acc, step, char-count]
		dup 0 >
	} {
		--
		# [...chars, acc, step, char-count -1]

		rot3
		# [...chars, char-count -1, acc, step]

		pull4
		# [...chars, char-count -1, acc, step, char]

		char-to-int
		# [...chars, char-count -1, acc, step, Result(int, string)]

		! # (ifs) { &result$is-err } { (return) } { true } { ! }
		# [...chars, char-count -1, acc, step, int]

		flip
		# [...chars, char-count -1, acc, int, step]

		dup 10 flip pow
		# [...chars, char-count -1, acc, int, step, 10 ^ (step+1)]

		pull3 *
		# [...chars, char-count -1, acc, step, int * 10 ^ (step+1)]

		pull3 +
		# [...chars, char-count -1, step, acc + int * 10 ^ (step+1)]

		flip ++
		# [...chars, char-count -1, acc + int * 10 ^ (step+1), step +1]

		pull3
		# [...chars, acc + int * 10 ^ (step+1), step +1, char-count -1]
		# new [...chars, acc, step, char-count]
	}
	drop # char-count (0)
	drop # step (original char-count)
	ok
}

(fn) [char] char-to-int {
	char (switch)
		"0" { 0 }
		"1" { 1 }
		"2" { 2 }
		"3" { 3 }
		"4" { 4 }
		"5" { 5 }
		"6" { 6 }
		"7" { 7 }
		"8" { 8 }
		"9" { 9 }
		# { char error (return) }
	ok
}
