(pragma set debug)
(include stdlib)

(fn) [ cl<fn> v ] @' { cl v @ }
(fn) [ cl<fn> v ] [ result<array> ] @* { cl v @ arr$pack }

(fn) [ times<num> cl< fn<num><?> > ] [ mapped<array> ] do-n-times {
	times
	(while) { dup 0 = not } {
		dup
			-- "c" set
			cl flip @
		"c" get
	}
	drop times arr$pack-n arr$reverse
}

(fn) [ list<array> index<num> ] [ T ] arr$get {
	list arr$unpack
		index - --
	(while) {dup 0 = not} {
		-- flip drop
	} drop
	"out" set
	index (while) {dup 0 = not} {
		-- flip drop
	} drop
	"out" get
}

(fn) [ a<num> ] [ <str> <str>] stn { "hi" }
(fn) [ s<str> ] [ n<num> ] nts { 10 }
10 (@stn) do-n-times

10 [ a<num> ][ <str> ] { a "%d" %% } do-n-times prt
