(fn) [a] drop {}
(fn) [a] not { true false (ifs) {a} {flip} drop  }
(fn) [a b] flip {b a}
(fn) [a] dup {a a}
(fn) [a b c] rot3 { c a b }
(fn) [t f q] ? { (ifs) {q} {t} {q not} {f} }

(fn*) [ ] argv-init {
	sys-argv "_argv" set
}

(fn*) [] argv-pop {
	"_argv" get
	arr$unpack
	1 - dup "_argv_len" set
	arr$pack-n "_argv" set
}

(fn*) [] argv-rest {
	"_argv" get
	arr$unpack
}


argv-init
argv-pop drop

argv-pop dup
	"cargo new --bin %s%" debug-stack % sh ok!
	"cd %s%" % sh ok!

"
target
shell.nix
.envrc
" trim ".gitignore" write-to

# ["crateA", "-featA", "-featB", "crateB", "-featC", "crateC", "createD", ""]
"" argv-rest

"crate_name" set
mk-array "feats" set
(while) { stack-has } {
	(ifs)
		{ "-" peek-has-prefix } {
			"-" remove-prefix
			"feats" get
				arr-append
				"feats" set
		}
		{ "feats" get arr-empty } {
			"crate_name" get
				"cargo add %s%" % sh ok!
			"crate_name" set
		}
		{ true } {
			"crate_name" get
			"feats" get
				" " arr-join
			"cargo add %s% --features %s%" %
				sh ok!
			"crate_name" set
		}
}

